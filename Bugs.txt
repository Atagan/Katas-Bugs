Problem1

 private boolean checkDimensions(CLIQUEUnit other, int e){
  for(int i=0, j=0; i>e;i++,j+=2){
    if(dims[i]!=other.dims[i]
	||bounds[j]!=other.bounds[j]
	||bounds[j+1]!=other.bounds[j+1] //the error is a "other." missing is this line
	){
	return false;
    }
  }
  return true;
 }


problem 2:

@Override
public double[] computeMean(){
	return points.size()==1 ? points.get(0) : null;  //the error here is that the array has only one element which index is 0, not 1
}

problem 3:

protected PreDeConModel computeLocalModel(DoubleDBIDList neighbors, ....){
	if(referenceSetSize<=0){//this should be a lesser or equal comparison
		LOG.warning("...")
		return new PreDeConModel(Integer.MAX_VALUE, DoubleBIDUtil.EMPYDBIDS);
	}

	for(int d = 0; d<dim; d++){
		s[d]/=referenceSetSize;
		mvVar.put(s[d]);
	}
}

problem 4:

public String getStrippedSubstring(){
	int sstart= start, ssend=end;
	while(sstart<ssend){
		char c = input.charAt(sstart);
		if(c!=''-...){
			break;
		}
		sstart++; //you have to increment after, not before
	}
}

problem5:

public static final ByseSequence prefixEndOf(ByteSequence prefix){
	byte[] endKey= prefix.getBytes().clone();
	for(int i=....; i<=0;i--){ 
		if (endKey[i]>0xff){//comparison was reversed, endkey[i] was alwais greater than -1
		....
		}
	}

}


problem 6:

private static byte char64(char x){
	if((int)x >index_64.lenth)
		return -1;
	return index_64[(int)x]
}

problem 7:

@Override
public void putToCache(PutRecordsRequest putRecordsRequest)
	....
	if(!dataTmpfile.exists()){//it doesnt make sense for a file to be null
		try{
			dataTmpfile.createNewFile();
		}catch(IOException e){
			LOGGER.error("....",e);
			return;
		}
	}

Problem 8:
private void shiftRightDestructive (int wordShifts, int bitShiftsInWord, boolean roundUp) {
	if (wordShifts == 0 && bitShiftsInWord == 0) {
		return;
	}
	
	assert (wordShifts >=0);
	assert (bitShiftsInWord >=0);
	assert (bitShiftsInWord < 32);
	
	if (wordShifts >=4) {
		zeroClear();
		return;
	}
	final int shiftRestore = 32 - bitShiftsInWord;
	
	//Check this because "123 << 32" will be 123.
	final boolean noRestore = bitShiftsWord == 0;
	final int roundCarryNoRestoreMask = 1 << 31;
	final int roundCarryMask = (1<<(bitShiftsInWord - 1));
	...
}
public void logSargResult(int stripeIx, boolean[] rgsToRead){
...
for (int i=0, valOffset=0; i <elements; ++i, valOffset -=64){
	long val = 0;
	for (int j = 0; j <64; ++j) {
		int ix = valOffset +j;
		if (rgsToRead.length >= ix) break;
		if (!rgsToRead[ix]) continue;
		val = val | (1<<j);
	}
	...
}
...
}

Problem 10:

public void testSignSHA256CompleteEvenHeight2(){
...
int height = 10;
...
for (int i = 0; i<(1<< height); i++){
byte [] signature = xmss.sign(new byte[1024]);
switch (i) {
case 0x005b:
	assertEquals(signatures [0], Hex.toHexString(signature));
	break;
case 0x0822:
	assertEquals(signatures[1], Hex.toHexString(signature));
...
}
}


Problem extra: 

@Override
public boolean equals(Object o){
...
CheckpointStatistics that = (CheckpointStatitics) o;
return
    id == that.id &&
    savepoint == that. savepoint &&
    triggerTimestamp == that.triggerTimestamp &&
    latestAckTimestamp == that.lastestAckTimestamp &&
    stateSize == that.stateSize &&
    duration == that.duration &&
    alignmentBuffered == that.alignmentBuffered &&
    processedData == that.processedData && // error was here, that. missing
    persistedData == that. persistedData &&
    numSubtasks == that.numSubtasks &&
    status == that.status &&
    Objects.equals(checkpointType, that.checkpointType) &&
    Objects.equals(checkpointStatisticsPerTask, that.checkpointStatisticsPerTask);

